schema {
    query: Query
    mutation: Mutation
}

type Pathway {
    id: ID!
    name: String!
}

type Query {
    # Can give patient ID or hospital number. If you don't give either it
    # returns null!
    getPatient(id: ID, hospitalNumber: String): Patient
    getPatientsForPathway(pathwayId: ID!, filter: DecisionPointType): [Patient!]
    getUser(id: ID!): User
    
    getDecisionPoint(id: ID!): DecisionPoint
    getDecisionPointsForPatient(patientId: ID!): [DecisionPoint!]

    getTestResult(id: ID!): TestResult
    getTestResultsForPatient(patientId: ID!): [TestResult!]
}

type Mutation {
    login(userName: String!, password: String!): User
    addDecisionPoint(decisionPoint: DecisionPoint): DecisionPoint
    addPatient(patient: Patient!): Patient
}

scalar Date

type Patient {
	id: ID!
	hospitalNumber: String!
	nationalNumber: String!
	communicationMethod: String
	firstName: String!
	lastName: String!
    dateOfBirth: Date
}

type Role{
    id: ID
    name: String
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    userName: String!
    password: String
    department: String!
    lastAccess: Date!
    roles: [Role!]
}

type Configuration {
    hospitalNumberName: String!
    hospitalNumberRegex: String!
    nationalPatientNumberName: String!
    nationalPatientNumberRegex: String!
}

enum DecisionPointType {
        TRIAGE
        CLINIC
        MDT
        AD_HOC
        FOLLOW_UP
}

type DecisionPoint {
    id: ID!
    patient: Patient!
    addedAt: Date!
    updatedAt: Date
    clinician: User!
    decisionType: DecisionPointType!
    clinicHistory: String!
    comorbidities: String!
    requestsReferrals: String!
}

interface TestResult {
    id: ID!
    patient: Patient!
    addedAt: Date!
    description: String!
    mediaUrls: [String]
}