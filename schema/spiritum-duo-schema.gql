schema {
    query: Query
    mutation: Mutation
}

type Query {
    getConfiguration(): [Configuration] # this needs to be investigated further as to how is best to handle it

    getDecisionPoints(): [DecisionPoint]
    getDecisionPointsByRecordId(id: ID!): [DecisionPoint]
    getDecisionPointsByPatientId(id: ID!): [DecisionPoint]

    getPathways():[Pathway!]
    getPathwaySearch(id:ID, name:String):Pathway
    getPatientPathways(patientId:ID!): [Pathway]
    getPathwayPatients(pathwayId:ID!): [Patient]

    getPatients():[Patient]
    getPatientBySearch(id: ID, hospitalNumber: String, nationalNumber: String, firstName: String, lastName: String, dateOfBirth: String): Patient 

    getRoles():[Role]
    getRoleBySearch(id: ID, name:String): Role

    getTestResults():[TestResult]
    getTestResultByRecordId(id: ID!): TestResult
    getTestResultByPatientId(id: ID!): TestResult

    getUsers(): [User]
    getUserById(id: ID!): User
}

type Mutation {
    createConfiguration(input:Configuration!): Configuration
    createDecisionPoint(input:DecisionPoint!): DecisionPoint
    createTestResult(input:TestResult!): TestResult
    createPathway(input:Pathway!): Pathway
    createPatient(input:Patient!): Patient
    createRole(input:Role!): Role
    createUser(input:User!): User

    login(username: String!, password: String!): User
}

scalar Date

type Pathway {
    id: ID!
    name: String!
}

type Patient {
	id: ID!
	hospitalNumber: String!
	nationalNumber: String!
	communicationMethod: String
	firstName: String!
	lastName: String!
    dateOfBirth: Date
}

type Role{
    id: ID
    name: String
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    userName: String!
    password: String
    department: String!
    lastAccess: Date!
    roles: [Role!]
}

type Configuration {
    hospitalNumberName: String!
    hospitalNumberRegex: String!
    nationalPatientNumberName: String!
    nationalPatientNumberRegex: String!
}

enum DecisionPointType {
        TRIAGE
        CLINIC
        MDT
        AD_HOC
        FOLLOW_UP
}

type DecisionPoint {
    id: ID!
    patient: Patient!
    addedAt: Date!
    updatedAt: Date
    clinician: User!
    decisionType: DecisionPointType!
    clinicHistory: String!
    comorbidities: String!
    requestsReferrals: String!
}

interface TestResult {
    id: ID!
    patient: Patient!
    addedAt: Date!
    description: String!
    mediaUrls: [String]
}