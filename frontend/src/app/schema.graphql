scalar Date
scalar DateTime

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getPatient(id:ID, hospitalNumber:String): Patient
    getPathway(id:ID!): Pathway
    getPathways: [Pathway!]!
    getUser(id:ID, username:String): User
    getPatientsOnPathway(pathwayId: ID!, awaitingDecisionType: DecisionType, isDischarged: Boolean = False): [Patient]
    getMilestoneTypes(pathwayId: ID): [MilestoneType!]
    getRolePermissions: [RolePermission!]
    getRoles: [Role!]!

    """
    getPatentOnPathwayConnection:
    This query takes either before or after arguments, but never both.
    If neither before or after is present, it requires a first argument to
    limit the number of results returned

    TODO: This returns a PatientConnection. It should return a OnPathway connection
    That requires new schema work
    """
    getPatientOnPathwayConnection(
        pathwayId: ID!
        awaitingDecisionType: DecisionType
        includeDischarged: Boolean
        first: Int
        after: String
        last: Int
        before: String
        outstanding: Boolean
        underCareOf: Boolean
    ): PatientConnection!

    getUserConnection(
        first: Int
        after: String
        last: Int
        before: String
    ): UserConnection!,

    patientSearch(query: String!, pathwayId: ID!): [Patient!]!
}

type Mutation {
    createPatient(input:PatientInput!): AddPatientPayload!
    createPathway(input:PathwayInput!): AddPathwayPayload!
    updatePathway(input:UpdatePathwayInput!): AddPathwayPayload!
    deletePathway(id: ID!): DeletePayload!
    createDecisionPoint(input:DecisionPointInput!): AddDecisionPointPayload!

    importMilestone(input:MilestoneImportInput!): ImportMilestonePayload!
    lockOnPathway(input:LockOnPathwayInput!): LockOnPathwayPayload!
}

type Subscription {
    milestoneResolved(clinicianID: ID): Milestone!
    onPathwayUpdated(
        pathwayId: ID
        includeDischarged: Boolean
    ): OnPathway!
}

enum PatientCommunicationMethods {
    LETTER
    EMAIL
    LANDLINE
    MOBILE
}

enum DecisionType{
    TRIAGE
    CLINIC
    MDT
    AD_HOC
    FOLLOW_UP
    POST_REQUEST
}

#### RETURN TYPES
type DeletePayload {
    success: Boolean
    userErrors: [UserError!]
}

type AddPatientPayload {
    patient:Patient
    userErrors:[UserError!]
}

type AddPathwayPayload {
    pathway:Pathway
    userErrors:[UserError!]
}

type AddDecisionPointPayload {
    decisionPoint:DecisionPoint
    userErrors:[UserError!]    
}

type ImportMilestonePayload {
    milestone: Milestone
    userErrors:[UserError!]
}

type LockOnPathwayPayload {
    onPathway: OnPathway
    userErrors:[UserError!]
}

#### DATA TYPES
type Role {
    id: ID!
    name: String!
    permissions: [RolePermission]!
}
type RolePermission {
    name: String!
}

type UserError {
    message:String!
    field:String!
}

type Pathway {
    id: ID!
    name: String!
    patients: [Patient]
    milestoneTypes: [MilestoneType!]
}

type Patient {
	id: ID!
	hospitalNumber: String!
	nationalNumber: String!
	communicationMethod: PatientCommunicationMethods!
	firstName: String!
	lastName: String!
    dateOfBirth: Date!

    onPathways(
        pathwayId: ID,
        includeDischarged: Boolean = False,
        awaitingDecisionType: DecisionType, 
        limit: Int
    ): [OnPathway!]
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type PatientConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [PatientEdge!]!
}

type PatientEdge {
    node: Patient!
    cursor: String!
}

type UserEdge {
    node: User!
    cursor: String!
}

type UserConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [UserEdge!]!
}

type Group {
    id: ID!
    name: String!
    permissions: [String]
}

type OnPathway {
    id: ID!
    patient: Patient!
    pathway: Pathway!
    isDischarged: Boolean!
    awaitingDecisionType: DecisionType!
    addedAt: DateTime!
    updatedAt: DateTime!
    referredAt: DateTime!
    decisionPoints: [DecisionPoint!]
    milestones(
        notOnDecisionPoint: Boolean = True
        outstanding: Boolean = False
        limit: Int = 0
    ): [Milestone!]
    underCareOf: User
    lockUser: User
    lockEndTime: DateTime
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    username: String!
    email: String!
    defaultPathwayId: ID!
    lastLogin: DateTime
    department: String!
    defaultPathway: Pathway!
    isActive: Boolean!
    roles: [Role!]!
}

type DecisionPoint {
    id: ID!
    clinician: User!
    onPathway: OnPathway!
    decisionType: DecisionType!
    addedAt: DateTime!
    updatedAt: DateTime!
    clinicHistory: String!
    comorbidities: String!
    milestones: [Milestone!]
    milestoneResolutions: [Milestone!]
}

type TestResult { 
    # ALL THIS INFO IS FROM THE PSEUDOTIE!
    id: ID!
    description: String!
    currentState: String!
    typeReferenceName: String!
    addedAt: DateTime!
    updatedAt: DateTime!
}

type MilestoneType {
    id: ID!
    refName: String!
    name: String!
    isDischarge: Boolean!
    isCheckboxHidden: Boolean!
    isTestRequest: Boolean!
    pathways: [Pathway!]
}


type Milestone {
    id: ID!

    milestoneType: MilestoneType!
    onPathway: OnPathway!
    decisionPoint: DecisionPoint
    forwardDecisionPoint: DecisionPoint
    testResult: TestResult

    addedAt: DateTime!                        # from SD                      
    updatedAt: DateTime!                      # from SD
    currentState: String!                     # from SD
}

enum MilestoneState {
  INIT
  ACTIVE
  WAITING
  ERROR
  COMPLETED
}

#### INPUT TYPES
input TestResultInput{
    milestoneId: ID!
    description: String!
}

input AddUserToGroupInput{
    user: Int!
    groupName: String!
}

input MilestoneRequestInput {
    milestoneTypeId: ID!
    currentState: MilestoneState
}

input MilestoneTypeInput{
    id: ID!
}

input MilestoneImportInput {
    onPathwayId: ID!
    milestoneTypeId: ID!
    description: String!
    currentState: MilestoneState!
}

input DecisionPointInput{
    onPathwayId: ID!
    decisionType: DecisionType!
    clinicHistory: String!
    comorbidities: String
    milestoneRequests: [MilestoneRequestInput!]
    milestoneResolutions: [ID!]
}
input LockOnPathwayInput{
    onPathwayId: ID!
    unlock: Boolean
}

input PathwayInput{
    name: String!
    milestoneTypes: [MilestoneTypeInput!]
}

input UpdatePathwayInput{
    id: ID!
    name: String!
    milestoneTypes: [MilestoneTypeInput!]
}

input GroupInput{
    name:String!
}

input PatientInput{
    firstName:String!
    lastName:String!
    communicationMethod:PatientCommunicationMethods
    hospitalNumber:String!
    nationalNumber:String!
    dateOfBirth:Date!

    pathwayId:ID!
    awaitingDecisionType: DecisionType
    referredAt: DateTime

    milestones: [MilestoneRequestInput]
}