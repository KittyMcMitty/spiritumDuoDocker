version: "3.9"

services:

  # ********** BACKEND SERVICES ********** #
  sd-postgres:
    container_name: sd-postgres
    image: postgres:14.0-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - TZ=Europe/London
    volumes:
      - sd-postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  sd-backend:
    depends_on:
      - sd-postgres
    container_name: sd-backend
    image: sd-backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    env_file: .env
    volumes:
      - ./backend:/app
      - ./socket:/socket
      - ./log:/log
      - ./media:/media
      - ./static:/static
      - ./uwsgi/vassals:/etc/uwsgi/vassals
    ports:
      - "8080:8080"
    networks:
      - app-network
    # command: python manage.py runserver 0.0.0.0:8080 # use this if standalone (listens on HTTP:8080)
    command: uwsgi --emperor /etc/uwsgi/vassals # use this is part of full stack (listens on WSGI:8080)

    
  # ********** FRONTEND SERVICES ********** #
  sd-frontend:
    container_name: sd-frontend
    image: sd-frontend
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend/:/app
      - ./media:/media
      - ./static:/static
    ports:
      - 3000:3000
    networks:
      - app-network
    command: ["yarn", "start"]

  sd-frontend-sb:
    container_name: sd-frontend-sb
    image: sd-frontend-sb
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
    ports:
      - 6006:6006
    networks:
      - app-network
    command: ["yarn", "storybook"] 

  # ********** INTERMEDIATE SERVICES ********** #
  sd-nginx:
    depends_on:
      - sd-frontend
      - sd-frontend-sb
      - sd-backend
    container_name: sd-nginx
    image: nginx:1.15-alpine
    restart: unless-stopped
    volumes:
      - ./media:/media
      - ./nginxCertbot/nginx:/etc/nginx/conf.d
      - ./nginxCertbot/data/certbot/conf:/etc/letsencrypt
      - ./nginxCertbot/data/certbot/www:/var/www/certbot
      - ./socket:/socket
      - ./static:/static
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  sd-certbot:
    container_name: sd-certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginxCertbot/data/certbot/conf:/etc/letsencrypt
      - ./nginxCertbot/data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


    # ********** LANDING PAGE ********** #
  sd-mysql:
    container_name: sd-mysql
    image: mysql:8.0
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=wordpress
    security_opt:
      - seccomp:unconfined
    volumes:
      - sd_mysql_data:/var/lib/mysql # Fixes some bind errors that were happening with mySQL
    command: "--default-authentication-plugin=mysql_native_password"
    networks:
      - app-network

  sd-wordpress:
    depends_on:
      - sd-mysql
      - sd-backend
    container_name: sd-wordpress
    image: wordpress:5.8.1-fpm-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=sd-mysql:3306
      - WORDPRESS_DB_USER=$MYSQL_USER
      - WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD
      - WORDPRESS_DB_NAME=wordpress
    volumes:
      - sd_wordpress:/var/www/html
    networks:
      - app-network

volumes:
  sd-postgres_data:
  sd_wordpress:
  sd_mysql_data:

networks:
  app-network:
    driver: bridge