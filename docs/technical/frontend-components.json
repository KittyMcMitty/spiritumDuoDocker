{
  "DecisionSubmissionConfirmation.tsx": {
    "description": "",
    "displayName": "DecisionSubmissionConfirmation",
    "methods": [],
    "props": {
      "cancelCallback": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "okCallback": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "milestones": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  id: string;\n  name: string;\n}",
              "signature": {
                "properties": [
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "{\n  id: string;\n  name: string;\n}[]"
        },
        "description": ""
      },
      "milestoneResolutions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      }
    }
  },
  "DecisionSubmissionSuccess.tsx": {
    "description": "",
    "displayName": "DecisionSubmissionSuccess",
    "methods": [],
    "props": {
      "milestones": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  id: string;\n  name: string;\n}",
              "signature": {
                "properties": [
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "{\n  id: string;\n  name: string;\n}[]"
        },
        "description": ""
      },
      "milestoneResolutions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      }
    }
  },
  "ModalPatient.tsx": {
    "description": "",
    "displayName": "ModalPatient",
    "methods": [],
    "props": {
      "patient": {
        "required": true,
        "tsType": {
          "name": "Patient"
        },
        "description": ""
      },
      "lock": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "closeCallback": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      }
    }
  },
  "Notification.tsx": {
    "description": "",
    "displayName": "Notification",
    "methods": []
  },
  "PageLayout.tsx": {
    "description": "This component takes an element and returns the element with\na Header above and a Footer below.",
    "displayName": "PageLayout",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "JSX.Element"
        },
        "description": ""
      }
    }
  },
  "PathwayComplete.tsx": {
    "description": "",
    "displayName": "PathwayComplete",
    "methods": []
  },
  "PathwaySelector.tsx": {
    "description": "Primary UI component for user interaction",
    "displayName": "PathwaySelector",
    "methods": [],
    "props": {
      "options": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "PathwayOption"
            }
          ],
          "raw": "PathwayOption[]"
        },
        "description": "List of pathways to present the user"
      },
      "currentOption": {
        "required": false,
        "tsType": {
          "name": "PathwayOption"
        },
        "description": "Current selected option"
      }
    }
  },
  "PatientList.tsx": {
    "description": "List of patients with pagination",
    "displayName": "PatientList",
    "methods": [],
    "props": {
      "pageCount": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "Number of pages"
      },
      "updateData": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(selectedItem: { selected: number; }) => void",
          "signature": {
            "arguments": [
              {
                "name": "selectedItem",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ selected: number; }",
                  "signature": {
                    "properties": [
                      {
                        "key": "selected",
                        "value": {
                          "name": "number",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Function to update patient data"
      },
      "data": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "JSX.Element"
            }
          ],
          "raw": "JSX.Element[]"
        },
        "description": "Patient data"
      },
      "isLoading": {
        "required": true,
        "tsType": {
          "name": "boolean"
        },
        "description": "Is data loading?"
      }
    }
  },
  "SdFooter.tsx": {
    "description": "",
    "displayName": "SdFooter",
    "methods": []
  },
  "SdHeader.tsx": {
    "description": "",
    "displayName": "SdHeader",
    "methods": [],
    "props": {
      "pathwayOptions": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "PathwayOption"
            }
          ],
          "raw": "PathwayOption[]"
        },
        "description": ""
      },
      "currentPathwayId": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "pathwayOnItemSelect": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(name: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "name",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "searchOnSubmit": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.FormEvent<EventTarget>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactFormEvent",
                  "raw": "React.FormEvent<EventTarget>",
                  "elements": [
                    {
                      "name": "EventTarget"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "user": {
        "required": false,
        "tsType": {
          "name": "User"
        },
        "description": ""
      }
    }
  },
  "WrappedPatientList.tsx": {
    "description": "",
    "displayName": "WrappedPatientList",
    "methods": [],
    "props": {
      "pathwayId": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "patientsToDisplay": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "outstanding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "underCareOf": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "includeDischarged": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "patientOnClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(hospitalNumber: Patient) => void",
          "signature": {
            "arguments": [
              {
                "name": "hospitalNumber",
                "type": {
                  "name": "Patient"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      }
    }
  },
  "LogoutLink.tsx": {
    "description": "Link to individual Patient",
    "displayName": "LogoutLink",
    "methods": [],
    "props": {
      "name": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": "Patient ID"
      }
    }
  },
  "PatientLink.tsx": {
    "description": "Link to individual Patient",
    "displayName": "PatientLink",
    "methods": [],
    "props": {
      "patient": {
        "required": true,
        "tsType": {
          "name": "Patient"
        },
        "description": "Patient object"
      },
      "to": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Location to go to",
        "defaultValue": {
          "value": "`/patient/${patient.hospitalNumber}`",
          "computed": false
        }
      }
    }
  },
  "FormGroup.tsx": {
    "description": "",
    "displayName": "FormGroup",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "hint": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "label": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "error": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: FormElementRenderProps<T>) => ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "intersection",
                  "raw": "Omit<T, ExcludedProps> & {\n  id: string;\n  name: string;\n}",
                  "elements": [
                    {
                      "name": "Omit",
                      "elements": [
                        {
                          "name": "T"
                        },
                        {
                          "name": "union",
                          "raw": "| 'hint'\n| 'label'\n| 'labelProps'\n| 'hintProps'\n| 'errorProps'\n| 'inputType'\n| 'disableErrorLine'",
                          "elements": [
                            {
                              "name": "literal",
                              "value": "'hint'"
                            },
                            {
                              "name": "literal",
                              "value": "'label'"
                            },
                            {
                              "name": "literal",
                              "value": "'labelProps'"
                            },
                            {
                              "name": "literal",
                              "value": "'hintProps'"
                            },
                            {
                              "name": "literal",
                              "value": "'errorProps'"
                            },
                            {
                              "name": "literal",
                              "value": "'inputType'"
                            },
                            {
                              "name": "literal",
                              "value": "'disableErrorLine'"
                            }
                          ]
                        }
                      ],
                      "raw": "Omit<T, ExcludedProps>"
                    },
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  id: string;\n  name: string;\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "id",
                            "value": {
                              "name": "string",
                              "required": true
                            }
                          },
                          {
                            "key": "name",
                            "value": {
                              "name": "string",
                              "required": true
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "ReactNode"
            }
          }
        },
        "description": ""
      }
    }
  },
  "Input.tsx": {
    "description": "",
    "displayName": "Input",
    "methods": []
  },
  "Select.tsx": {
    "description": "",
    "displayName": "Select",
    "methods": []
  },
  "Textarea.tsx": {
    "description": "",
    "displayName": "Textarea",
    "methods": []
  }
}