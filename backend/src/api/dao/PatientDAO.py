from datetime import date, datetime
from typing import Union, Iterable
from api.models.Patient import patient_orm

# Interface between database and GraphQL
class _interface:
    def __init__(self, id:int=None, hospitalNumber:str=None, nationalNumber:str=None, communicationMethod:str=None, firstName:str=None, lastName:str=None, dateOfBirth:date=None):
        self.id=id
        self.hospitalNumber=hospitalNumber
        self.nationalNumber=nationalNumber
        self.communicationMethod=communicationMethod
        self.firstName=firstName
        self.lastName=lastName
        self.dateOfBirth=dateOfBirth
        
# DAO object
class PatientDAO:
    def __init__(self, id:int=None, hospitalNumber:str=None, nationalNumber:str=None, communicationMethod:str=None, firstName:str=None, lastName:str=None, dateOfBirth:date=None):
        self.id=id
        self.hospitalNumber=hospitalNumber
        self.nationalNumber=nationalNumber
        self.communicationMethod=communicationMethod
        self.firstName=firstName
        self.lastName=lastName
        self.dateOfBirth=dateOfBirth
        self._orm: patient_orm=None

        if not self._orm:
            self._orm = patient_orm()

        if self.id:
            self._orm.id=self.id
        self._orm.hospital_number=self.hospitalNumber
        self._orm.national_number=self.nationalNumber
        self._orm.communication_method=self.communicationMethod
        self._orm.first_name=self.firstName
        self._orm.last_name=self.lastName
        self._orm.date_of_birth=self.dateOfBirth
        self._orm.save()
        self.id=self._orm.id # We've got to do it this way because the ID is generated by the DB (auto_increment)
    
    @classmethod
    def read(cls, searchParam: Union[int, str]=None, searchParamExtension: str=None):
        # TODO: need to add better search parameters. Probably specifics (hosp/nat #, f/l name, etc)
        try:
            if searchParam==None:
                returnData=patient_orm.objects.all()
            elif type(searchParam) is int:
                returnData=patient_orm.objects.get(id=searchParam)
            else:
                returnData=patient_orm.objects.get(first_name=searchParam, last_name=searchParamExtension)
            returnList=[]
            
            if isinstance(returnData, Iterable):
                for row in returnData:
                    returnList.append(
                        cls(
                            id=row.id,
                            hospitalNumber=row.hospital_number,
                            nationalNumber=row.national_number,
                            communicationMethod=row.communication_method,
                            firstName=row.first_name,
                            lastName=row.last_name,
                            dateOfBirth=row.date_of_birth,
                        )
                    )
                return returnList
            else:
                return cls(
                    id=returnData.id,
                    hospitalNumber=returnData.hospital_number,
                    nationalNumber=returnData.national_number,
                    communicationMethod=returnData.communication_method,
                    firstName=returnData.first_name,
                    lastName=returnData.last_name,
                    dateOfBirth=returnData.date_of_birth,
                )
        except (patient_orm.DoesNotExist):
            return False

    def delete(self):
        self._orm.delete()
        
    def save(self):
        self._orm.hospital_number=self.hospitalNumber
        self._orm.national_number=self.nationalNumber
        self._orm.communication_method=self.communicationMethod
        self._orm.first_name=self.firstName
        self._orm.last_name=self.lastName
        self._orm.date_of_birth=self.dateOfBirth
        self._orm.save()

        return _interface(
            id=self._orm.id,
            hospitalNumber=self._orm.hospital_number,
            nationalNumber=self._orm.national_number,
            communicationMethod=self._orm.communication_method,
            firstName=self._orm.first_name,
            lastName=self._orm.last_name,
            dateOfBirth=self._orm.date_of_birth,
        )