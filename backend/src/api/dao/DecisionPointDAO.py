from datetime import datetime
from typing import Iterable

from api.models.DecisionPoint import decisionpoint_orm

# Interface between database and GraphQL
class _interface:
    def __init__(self, id:int, patient:int, clinician:int, type:str, addedAt:datetime, updatedAt:datetime, clinicHistory:str, comorbidities:str):
        self.id=id
        self.patient=patient
        self.clinician=clinician
        self.type=type
        self.addedAt=addedAt
        self.updatedAt=updatedAt
        self.clinicHistory=clinicHistory
        self.comorbidities=comorbidities

# DAO object
class DecisionPointDAO:
    def __init__(self, id:int=None, patient:int=None, clinician:int=None, type:str=None, addedAt:datetime=None, updatedAt:datetime=None, clinicHistory:str=None, comorbidities:str=None):
        self.id=id
        self.patient=patient
        self.clinician=clinician
        self.type=type
        self.addedAt=addedAt
        self.updatedAt=updatedAt
        self.clinicHistory=clinicHistory
        self.comorbidities=comorbidities
        self._orm: decisionpoint_orm = None

        if not self._orm:
            self._orm = decisionpoint_orm()

        if self.id:
            self._orm.id=self.id

        self._orm.patient=self.patient
        self._orm.clinician=self.clinician
        self._orm.type=self.type
        self._orm.added_at=self.addedAt
        self._orm.updated_at=self.updatedAt
        self._orm.clinic_history=self.clinicHistory
        self._orm.comorbidities=self.comorbidities
        self._orm.save()
        self.id=self._orm.id # We've got to do it this way because the ID is generated by the DB (auto_increment)
    
    @classmethod
    def read(cls, id:int=None): # TODO: add search functionality
        try:
            if not id:
                returnData=decisionpoint_orm.objects.all()
            else:
                returnData=decisionpoint_orm.objects.get(id=id)
            returnList=[]
            
            if isinstance(returnData, Iterable):
                for row in returnData:
                    returnList.append(
                        cls(
                            id=row.id,
                            patient=row.patient,
                            clinician=row.clinician,
                            type=row.type,
                            addedAt=row.added_at,
                            updatedAt=row.updated_at,
                            clinicHistory=row.clinic_history,
                            comorbidities=row.comorbidities,
                        )
                    )
                return returnList
            else:
                return cls(
                    id=returnData.id,
                    patient=returnData.patient,
                    clinician=returnData.clinician,
                    type=returnData.type,
                    addedAt=returnData.added_at,
                    updatedAt=returnData.updated_at,
                    clinicHistory=returnData.clinic_history,
                    comorbidities=returnData.comorbidities,
                )
        except (decisionpoint_orm.DoesNotExist):
            return False

    def delete(self):
        self._orm.delete()
        
    def save(self):
        self._orm.patient=self.patient
        self._orm.clinician=self.clinician
        self._orm.type=self.type
        self._orm.added_at=self.addedAt
        self._orm.updated_at=self.updatedAt
        self._orm.clinic_history=self.clinicHistory
        self._orm.comorbidities=self.comorbidities
        self._orm.save()

        return _interface(
            id=self._orm.id,
            patient=self._orm.patient,
            clinician=self._orm.clinician,
            type=self._orm.type,
            addedAt=self._orm.added_at,
            updatedAt=self._orm.updated_at,
            clinicHistory=self._orm.clinic_history,
            comorbidities=self._orm.comorbidities,
        )