scalar Date
scalar DateTime

schema {
    query: Query
    mutation: Mutation
}

type Query {
    getPatient(id:ID, hospitalNumber:String): Patient
    getPathway(id:ID!): Pathway
    getPathways: [Pathway]
    getUser(id:ID, username:String): User
    getPatientsOnPathway(pathwayId: ID!, awaitingDecisionType: DecisionType, isDischarged: Boolean = False): [Patient]
    getMilestoneTypes: [MilestoneType!]

    """
    getPatentOnPathwayConnection:
    This query takes either before or after arguments, but never both.
    If neither before or after is present, it requires a first argument to
    limit the number of results returned

    TODO: This returns a PatientConnection. It should return a OnPathway connection
    That requires new schema work
    """
    getPatientOnPathwayConnection(
        pathwayId: ID!
        awaitingDecisionType: DecisionType
        isDischarged: Boolean
        first: Int
        after: String
        last: Int
        before: String
        outstanding: Boolean
        underCareOf: Boolean
    ): PatientConnection!
}

type Mutation {
    createPatient(input:PatientInput!): AddPatientPayload!
    createPathway(input:PathwayInput!): AddPathwayPayload!
    createDecisionPoint(input:DecisionPointInput!): AddDecisionPointPayload!

    importMilestone(input:MilestoneImportInput!): AddMilestonePayload!
}

enum PatientCommunicationMethods {
    LETTER
    EMAIL
    LANDLINE
    MOBILE
}

enum DecisionType{
    TRIAGE
    CLINIC
    MDT
    AD_HOC
    FOLLOW_UP
    POST_REQUEST
}

#### RETURN TYPES
type AddPatientPayload {
    patient:Patient
    userErrors:[UserError!]
}
type AddPathwayPayload {
    pathway:Pathway
    userErrors:[UserError!]
}
type AddDecisionPointPayload{
    decisionPoint:DecisionPoint
    userErrors:[UserError!]    
}
type AddMilestonePayload{
    milestone: Milestone
    userErrors:[UserError!]
}

#### DATA TYPES
type UserError{
    message:String!
    field:String!
}

type Pathway {
    id: ID!
    name: String!
    patients:[Patient]
}

type Patient {
	id: ID!
	hospitalNumber: String!
	nationalNumber: String!
	communicationMethod: PatientCommunicationMethods!
	firstName: String!
	lastName: String!
    dateOfBirth: Date!

    onPathways(
        pathwayId: ID,
        isDischarged: Boolean = False,
        awaitingDecisionType: DecisionType, 
        limit: Int
    ): [OnPathway!]
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type PatientConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [PatientEdge!]
}

type PatientEdge {
    node: Patient!
    cursor: String!
}

type Group {
    id: ID!
    name: String!
    permissions: [String]
}

type OnPathway {
    id: ID!
    patient: Patient!
    pathway: Pathway!
    isDischarged: Boolean!
    awaitingDecisionType: DecisionType!
    addedAt: DateTime!
    updatedAt: DateTime!
    referredAt: DateTime!
    decisionPoints: [DecisionPoint!]
    milestones(notOnDecisionPoint: Boolean = True): [Milestone!]
    underCareOf: User
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    username: String!
    lastLogin: DateTime
    department: String!
    defaultPathway: Pathway!
}

type DecisionPoint {
    id: ID!
    clinician: User!
    onPathway: OnPathway!
    decisionType: DecisionType!
    addedAt: DateTime!
    updatedAt: DateTime!
    clinicHistory: String!
    comorbidities: String!
    milestones: [Milestone!]
    milestoneResolutions: [Milestone!]
}

type TestResult { 
    # ALL THIS INFO IS FROM THE PSEUDOTIE!
    id: ID!
    description: String!
    currentState: String!
    typeReferenceName: String!
    addedAt: DateTime!
    updatedAt: DateTime!
}

type MilestoneType {
    id: ID!
    refName: String!
    name: String!
    isDischarge: Boolean!
    isCheckboxHidden: Boolean!
}


type Milestone {
    id: ID!

    milestoneType: MilestoneType!
    onPathway: OnPathway!
    decisionPoint: DecisionPoint
    forwardDecisionPoint: DecisionPoint
    testResult: TestResult

    addedAt: DateTime!                        # from SD                      
    updatedAt: DateTime!                      # from SD
    currentState: String!                     # from SD
}

enum MilestoneState {
  INIT
  ACTIVE
  WAITING
  ERROR
  COMPLETED
}

#### INPUT TYPES
input TestResultInput{
    milestoneId: ID!
    description: String!
}

input AddUserToGroupInput{
    user: Int!
    groupName: String!
}

input MilestoneRequestInput {
    milestoneTypeId: ID!
    currentState: MilestoneState
}

input MilestoneImportInput {
    onPathwayId: ID!
    milestoneTypeId: ID!
    description: String!
    currentState: MilestoneState!
}

input DecisionPointInput{
    onPathwayId: ID!
    decisionType: DecisionType!
    clinicHistory: String!
    comorbidities: String
    milestoneRequests: [MilestoneRequestInput!]
    milestoneResolutions: [ID!]
}

input PathwayInput{
    name:String!
}

input GroupInput{
    name:String!
}

input PatientInput{
    firstName:String!
    lastName:String!
    communicationMethod:PatientCommunicationMethods
    hospitalNumber:String!
    nationalNumber:String!
    dateOfBirth:Date!

    pathwayId:ID!
    awaitingDecisionType: DecisionType
    referredAt: DateTime

    milestones: [MilestoneRequestInput]
}