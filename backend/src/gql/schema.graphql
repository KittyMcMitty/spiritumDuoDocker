scalar Date
scalar DateTime

schema {
    query: Query
    mutation: Mutation
}

type Query {
    getPatient(id:ID, hospitalNumber:String): Patient
    getPathway(id:ID!): Pathway
    getPathways: [Pathway]
    getUser(id:ID!): User
}

type Mutation{
    login(username:String!, password:String!): User
}

enum PatientCommunicationMethods{
    LETTER
    EMAIL
    LANDLINE
    MOBILE
}

enum DecisionTypes{
    TRIAGE
    CLINIC
    MDT
    AD_HOC
    FOLLOW_UP
}

#### RETURN TYPES
type AddPatientPayload{
    patient:Patient
    userErrors:[UserError]
}
type AddPathwayPayload{
    pathway:Pathway
    userErrors:[UserError]
}

#### DATA TYPES
type UserError{
    message:String!
    field:String!
}

type Pathway {
    id: ID!
    name: String!

    patients:[Patient]
}

type Patient {
	id: ID!
	hospitalNumber: String!
	nationalNumber: String!
	communicationMethod: PatientCommunicationMethods!
	firstName: String!
	lastName: String!
    dateOfBirth: Date!

    pathways: [OnPathway]
    decisionPoints:[DecisionPoint]
    # testResults: [TestResult]
}

type Group{
    id: ID!
    name: String!
}



type OnPathway{
    id: ID!
    patient: Patient!
    pathway: Pathway!
    isDischarged: Boolean!
    awaitingDecisionType: DecisionTypes!
    addedAt: DateTime!
    updatedAt: DateTime!
}

type User{
    id:ID!
    username:String!
    password:String!
    firstName:String!
    lastName:String!
    department:String!
    lastLogin:DateTime!
}

type DecisionPoint {
    id: ID!
    patient: Patient!
    clinician: User!
    onPathway: OnPathway!

    decisionType: DecisionTypes!
    addedAt: DateTime!
    updatedAt: DateTime!
    clinicHistory: String!
    comorbidities: String!
    requestsReferrals: String!
}