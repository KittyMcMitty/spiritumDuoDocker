import json
from hamcrest import equal_to, assert_that
import pytest


# Feat: test submitFeedback GQL mutation
# Scen: the GraphQL query for submitFeedback is executed
@pytest.mark.asyncio
async def test_submit_feedback(
    httpx_test_client, httpx_login_user,
    test_email_adapter
):
    def send_email(**kwargs):
        return True
    test_email_adapter.send_email = send_email

    res = await httpx_test_client.post(
        url="graphql",
        json={
            "query": """
                mutation submitFeedback($screenshotBase64: String!, $feedback: String!){
                    submitFeedback(input: {
                        screenshotBase64: $screenshotBase64,
                        feedback: $feedback
                    }){
                        success
                    }
                }
            """,
            "variables": {
                "screenshotBase64": "",
                "feedback": "i like trains"
            }
        },
    )

    assert_that(res.status_code, equal_to(200))
    print(res.text)
    json_res = json.loads(res.text)['data']['submitFeedback']
    assert_that(json_res['success'], equal_to(True))
